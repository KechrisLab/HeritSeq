setwd("~/Documents/heritseq")
load("data/heritseq_example.RData")
requireNamespace("lme4")
?lmer
CountVector<- simData_voom[1,]
Strains <- strains
PriorWeight <- weights_voom[1,]
dat_sub <- data.frame(expr = CountVector, strain = Strains)
model_sub <- lmer(formula = expr ~ 1 + (1|strain), data = dat_sub,
weights = PriorWeight)
require(lme4)
dat_sub <- data.frame(expr = CountVector, strain = Strains)
model_sub <- lmer(formula = expr ~ 1 + (1|strain), data = dat_sub,
weights = PriorWeight)
model_sub
sigma(model_sub)^2
sigma(model_sub)
names(model_sub)
names(summary(model_sub))
sum_model_sub <- summary(model_sub)
sum_model_sub$varcor
class(sum_model_sub$varcor)
ublist(sum_model_sub$varcor)
unlist(sum_model_sub$varcor)
?unlist
length(sum_model_sub$varcor)
sigma(model_sub)^2
sum_model_sub$varcor^2
length(sum_model_sub$residuals)
sum_model_sub$vcov
sum_model_sub
sigma
names(sum_model_sub)
sum_model_sub$sigma
sum_model_sub
.2297^2
unlist(sum_model_sub$varcor)
?unlist
unlist(sum_model_sub)
?lm
??DESeqDataSetFromMatrix
??estimateSizeFactors
?lm
?rnegbin
?requireNamespace
loadedNamespaces()
library(glmmADMB)
library(pbapply)
fitNBMM <- function(CountMatrix, Strains, test = FALSE){
if(is.null(dim(CountMatrix))){
warning('Fitting a single feature.')
CountMatrix <- matrix(CountMatrix, nrow = 1)
}
GeneIDs <- rownames(CountMatrix)
paras <- t(pbsapply(1:nrow(CountMatrix), function(x){
CountVector <- CountMatrix[x, ]
GeneID <- GeneIDs[x]
dat_sub <- data.frame(expr = as.numeric(CountVector), strain = Strains)
para <- tryCatch({
model_sub2 <- glmmadmb(formula = expr ~ 1 + (1|strain),
data = dat_sub, family = 'nbinom', link = 'log')
sigma_a2 <- as.numeric(model_sub2$S$strain[1])
beta0 <- as.numeric(model_sub2$b)
phi <- 1/model_sub2$alpha
para_sub <- c(beta0, sigma_a2, phi)
if (test){
model_sub2_red <- glmmadmb(formula = expr ~ 1, data = dat_sub,
family = 'nbinom', link = 'log')
test.stat <- 2*logLik(model_sub2) - 2*logLik(model_sub2_red)
if (test.stat<1e-6) {test.stat <- 0}
# test.stat <- round(test.stat, digits = 1e-6)
pval <- 0.5*pchisq(test.stat, df = 1, lower.tail = FALSE) +
0.5*as.numeric(test.stat == 0)
para_sub <- c(para_sub, pval)
}
para_sub
}, error = function(err){
print(paste('Using alt method for', GeneID))
model_sub <- try({glmer.nb(formula = expr ~ 1 + (1|strain),
data = dat_sub, verbose = F)}, silent=T)
if (class(model_sub) != "try-error"){
sum_model_sub <- summary(model_sub)
sigma_a2 <- unlist(sum_model_sub$varcor)
beta0 <- sum_model_sub$coefficients[1]
phi <- 1/getME(model_sub, "glmer.nb.theta")
para_sub <- c(beta0, sigma_a2, phi)
}else{
print(paste("Fitting problem for feature", x,"returning NA"))
para_sub <- rep(NA, 3)
}
if (test){
model_sub_red <- try({glm.nb(formula = expr ~ 1,
data = dat_sub, link = 'log')},
silent = TRUE)
if (class(model_sub) != "try-error" &
class(model_sub_red) != "try-error"){
test.stat <- 2*logLik(model_sub) - 2*logLik(model_sub_red)
if (test.stat<1e-6) {test.stat <- 0}
# test.stat <- round(test.stat, digits = 1e-6)
pval <- 0.5*pchisq(test.stat, df = 1, lower.tail = FALSE) +
0.5*as.numeric(test.stat == 0)
}else{
print(paste("Cannot do test for feature", x,"fitting problem."))
pval <- NA
}
para_sub <- c(para_sub, pval)
}
return(para_sub)
})
return(para)
}))
paras1 <- paras[ , 1:3]
rownames(paras1) <- GeneIDs
colnames(paras1) <- c("beta0", "sigma_a2", "phi")
if (test){
return(list(paras = paras1, pvals = paras[ , 4]))
}else{
return(list(paras = paras1, pvals = NULL))
}
}
loadedNamespaces()
fitNBMM(CountVector, Strains = strains)
CountMatrix = CountVector
if(is.null(dim(CountMatrix))){
warning('Fitting a single feature.')
CountMatrix <- matrix(CountMatrix, nrow = 1)
}
GeneIDs <- rownames(CountMatrix)
paras <- t(pbsapply(1:nrow(CountMatrix), function(x){
CountVector <- CountMatrix[x, ]
GeneID <- GeneIDs[x]
dat_sub <- data.frame(expr = as.numeric(CountVector), strain = Strains)
para <- tryCatch({
model_sub2 <- glmmadmb(formula = expr ~ 1 + (1|strain),
data = dat_sub, family = 'nbinom', link = 'log')
sigma_a2 <- as.numeric(model_sub2$S$strain[1])
beta0 <- as.numeric(model_sub2$b)
phi <- 1/model_sub2$alpha
para_sub <- c(beta0, sigma_a2, phi)
if (test){
model_sub2_red <- glmmadmb(formula = expr ~ 1, data = dat_sub,
family = 'nbinom', link = 'log')
test.stat <- 2*logLik(model_sub2) - 2*logLik(model_sub2_red)
if (test.stat<1e-6) {test.stat <- 0}
# test.stat <- round(test.stat, digits = 1e-6)
pval <- 0.5*pchisq(test.stat, df = 1, lower.tail = FALSE) +
0.5*as.numeric(test.stat == 0)
para_sub <- c(para_sub, pval)
}
para_sub
}, error = function(err){
print(paste('Using alt method for', GeneID))
model_sub <- try({glmer.nb(formula = expr ~ 1 + (1|strain),
data = dat_sub, verbose = F)}, silent=T)
if (class(model_sub) != "try-error"){
sum_model_sub <- summary(model_sub)
sigma_a2 <- unlist(sum_model_sub$varcor)
beta0 <- sum_model_sub$coefficients[1]
phi <- 1/getME(model_sub, "glmer.nb.theta")
para_sub <- c(beta0, sigma_a2, phi)
}else{
print(paste("Fitting problem for feature", x,"returning NA"))
para_sub <- rep(NA, 3)
}
if (test){
model_sub_red <- try({glm.nb(formula = expr ~ 1,
data = dat_sub, link = 'log')},
silent = TRUE)
if (class(model_sub) != "try-error" &
class(model_sub_red) != "try-error"){
test.stat <- 2*logLik(model_sub) - 2*logLik(model_sub_red)
if (test.stat<1e-6) {test.stat <- 0}
# test.stat <- round(test.stat, digits = 1e-6)
pval <- 0.5*pchisq(test.stat, df = 1, lower.tail = FALSE) +
0.5*as.numeric(test.stat == 0)
}else{
print(paste("Cannot do test for feature", x,"fitting problem."))
pval <- NA
}
para_sub <- c(para_sub, pval)
}
return(para_sub)
})
return(para)
}))
test = F
paras <- t(pbsapply(1:nrow(CountMatrix), function(x){
CountVector <- CountMatrix[x, ]
GeneID <- GeneIDs[x]
dat_sub <- data.frame(expr = as.numeric(CountVector), strain = Strains)
para <- tryCatch({
model_sub2 <- glmmadmb(formula = expr ~ 1 + (1|strain),
data = dat_sub, family = 'nbinom', link = 'log')
sigma_a2 <- as.numeric(model_sub2$S$strain[1])
beta0 <- as.numeric(model_sub2$b)
phi <- 1/model_sub2$alpha
para_sub <- c(beta0, sigma_a2, phi)
if (test){
model_sub2_red <- glmmadmb(formula = expr ~ 1, data = dat_sub,
family = 'nbinom', link = 'log')
test.stat <- 2*logLik(model_sub2) - 2*logLik(model_sub2_red)
if (test.stat<1e-6) {test.stat <- 0}
# test.stat <- round(test.stat, digits = 1e-6)
pval <- 0.5*pchisq(test.stat, df = 1, lower.tail = FALSE) +
0.5*as.numeric(test.stat == 0)
para_sub <- c(para_sub, pval)
}
para_sub
}, error = function(err){
print(paste('Using alt method for', GeneID))
model_sub <- try({glmer.nb(formula = expr ~ 1 + (1|strain),
data = dat_sub, verbose = F)}, silent=T)
if (class(model_sub) != "try-error"){
sum_model_sub <- summary(model_sub)
sigma_a2 <- unlist(sum_model_sub$varcor)
beta0 <- sum_model_sub$coefficients[1]
phi <- 1/getME(model_sub, "glmer.nb.theta")
para_sub <- c(beta0, sigma_a2, phi)
}else{
print(paste("Fitting problem for feature", x,"returning NA"))
para_sub <- rep(NA, 3)
}
if (test){
model_sub_red <- try({glm.nb(formula = expr ~ 1,
data = dat_sub, link = 'log')},
silent = TRUE)
if (class(model_sub) != "try-error" &
class(model_sub_red) != "try-error"){
test.stat <- 2*logLik(model_sub) - 2*logLik(model_sub_red)
if (test.stat<1e-6) {test.stat <- 0}
# test.stat <- round(test.stat, digits = 1e-6)
pval <- 0.5*pchisq(test.stat, df = 1, lower.tail = FALSE) +
0.5*as.numeric(test.stat == 0)
}else{
print(paste("Cannot do test for feature", x,"fitting problem."))
pval <- NA
}
para_sub <- c(para_sub, pval)
}
return(para_sub)
})
return(para)
}))
CountMatrix[1:4]
para
paras
class(paras)
dim(paras)
paras1 <- paras[ , 1:3]
paras1
paras1 <- matrix(paras[ , 1:3], ncol = 3)
paras21
paras1
rownames(paras1) <- GeneIDs
colnames(paras1) <- c("beta0", "sigma_a2", "phi")
paras1
test = T
paras <- t(pbsapply(1:nrow(CountMatrix), function(x){
CountVector <- CountMatrix[x, ]
GeneID <- GeneIDs[x]
dat_sub <- data.frame(expr = as.numeric(CountVector), strain = Strains)
para <- tryCatch({
model_sub2 <- glmmadmb(formula = expr ~ 1 + (1|strain),
data = dat_sub, family = 'nbinom', link = 'log')
sigma_a2 <- as.numeric(model_sub2$S$strain[1])
beta0 <- as.numeric(model_sub2$b)
phi <- 1/model_sub2$alpha
para_sub <- c(beta0, sigma_a2, phi)
if (test){
model_sub2_red <- glmmadmb(formula = expr ~ 1, data = dat_sub,
family = 'nbinom', link = 'log')
test.stat <- 2*logLik(model_sub2) - 2*logLik(model_sub2_red)
if (test.stat<1e-6) {test.stat <- 0}
# test.stat <- round(test.stat, digits = 1e-6)
pval <- 0.5*pchisq(test.stat, df = 1, lower.tail = FALSE) +
0.5*as.numeric(test.stat == 0)
para_sub <- c(para_sub, pval)
}
para_sub
}, error = function(err){
print(paste('Using alt method for', GeneID))
model_sub <- try({glmer.nb(formula = expr ~ 1 + (1|strain),
data = dat_sub, verbose = F)}, silent=T)
if (class(model_sub) != "try-error"){
sum_model_sub <- summary(model_sub)
sigma_a2 <- unlist(sum_model_sub$varcor)
beta0 <- sum_model_sub$coefficients[1]
phi <- 1/getME(model_sub, "glmer.nb.theta")
para_sub <- c(beta0, sigma_a2, phi)
}else{
print(paste("Fitting problem for feature", x,"returning NA"))
para_sub <- rep(NA, 3)
}
if (test){
model_sub_red <- try({glm.nb(formula = expr ~ 1,
data = dat_sub, link = 'log')},
silent = TRUE)
if (class(model_sub) != "try-error" &
class(model_sub_red) != "try-error"){
test.stat <- 2*logLik(model_sub) - 2*logLik(model_sub_red)
if (test.stat<1e-6) {test.stat <- 0}
# test.stat <- round(test.stat, digits = 1e-6)
pval <- 0.5*pchisq(test.stat, df = 1, lower.tail = FALSE) +
0.5*as.numeric(test.stat == 0)
}else{
print(paste("Cannot do test for feature", x,"fitting problem."))
pval <- NA
}
para_sub <- c(para_sub, pval)
}
return(para_sub)
})
return(para)
}))
paras1 <- matrix(paras[ , 1:3], ncol = 3)
rownames(paras1) <- GeneIDs
colnames(paras1) <- c("beta0", "sigma_a2", "phi")
if (test){
return(list(paras = paras1, pvals = paras[ , 4]))
}else{
return(list(paras = paras1, pvals = NULL))
}
list(paras = paras1, pvals = paras[ , 4])
loadedNamespaces()
requireNamespace("cplm")
?cplm::cpglm
?rnegbin
?logLik
?unlist
?surpressPackageStartupMessages
?try
?matrix
?lm
?globalVariables
loadedNamespaces()
require(DESeq2)
?getVarianceStablizedData
??getVarianceStablizedData
getVarianceStablizedData
require(DESeq2)
?getVarianceStablizedData
?essay
library(DESeq2)
?varianceStabilizingTransformation
?getVarianceStabilizedData
?essay
??essay
getVarianceStabilizedData
loadedNamespaces()
unloadNamespace("DESeq2")
rm(list = ls())
loadedNamespaces()
?estimateDispersions
library(DESeq2)
?getVarianceStabilizedData
?essay
sessionInfo()
?essay
library(DESeq2
)
?essay
??essay
?assay
dds <- makeExampleDESeqDataSet(m=6)
vsd <- varianceStabilizingTransformation(dds)
dists <- dist(t(assay(vsd)))
class(vsd)
blah <- getVarianceStabilizedData(vsd)
ddsNew <- makeExampleDESeqDataSet(m=1)
ddsNew <- estimateSizeFactors(ddsNew)
dispersionFunction(ddsNew) <- dispersionFunction(dds)
vsdNew <- varianceStabilizingTransformation(ddsNew, blind=FALSE)
design(dds) <- ~ 1
dds <- estimateSizeFactors(dds)
dds <- estimateDispersions(dds)
# use the previous dispersion function for a new sample
ddsNew <- makeExampleDESeqDataSet(m=1)
ddsNew <- estimateSizeFactors(ddsNew)
dispersionFunction(ddsNew) <- dispersionFunction(dds)
vsdNew <- varianceStabilizingTransformation(ddsNew, blind=FALSE)
blah <- getVarianceStabilizedData(vsdNew)
dim(vsdNew)
dim(vsd)
dim(dds)
head(vsd)
head(assay(vsd))
dim(assay(vsd))
dim(assay(dds))
loadedNamespaces()
browseVignettes("DESeq2")
sessionInfo()
?apply
loadedNamespaces()
?unloadNamespace
install.packages("rmarkdown")
rm(list = ls())
loadedNamespaces()
